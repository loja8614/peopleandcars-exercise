/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package training.peopleandcars.controller;

import training.peopleandcars.modelapi.Car;
import training.peopleandcars.modelapi.People;

import java.util.Optional;
import java.util.UUID;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-22T19:22:29.543238700-05:00[America/Mexico_City]")
@Validated
public interface PeopleApi {

    /**
     * POST /people
     * Add / Update people
     *
     * @param people Create/Update a People (optional)
     * @return Successful request (status code 200)
     *         or Invalid input (status code 405)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/people",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<People> addUpdatePeople(
         @Valid @RequestBody(required = false) People people
    );


    /**
     * DELETE /people/{peopleId}
     * Delete people
     *
     * @param peopleId UUID of people to delete (required)
     * @return Successful request (status code 200)
     *         or Not Found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/people/{peopleId}",
        produces = { "application/json" }
    )
    ResponseEntity<People> deletePeople(
         @PathVariable("peopleId") UUID peopleId
    );


    /**
     * GET /people
     * Returns all people from the system
     *
     * @return Successful request (status code 200)
     *         or Request not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/people",
        produces = { "application/json" }
    )
    ResponseEntity<List<People>> getAllPeople(
        
    );


    /**
     * GET /people/{peopleId}/cars
     * Get cars by  people
     *
     * @param peopleId UUID of people to get cars (required)
     * @return Successful request (status code 200)
     *         or Request not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/people/{peopleId}/cars",
        produces = { "application/json" }
    )
    ResponseEntity<List<Car>> getCarsByPeople(
         @PathVariable("peopleId") UUID peopleId
    );


    /**
     * GET /people/{peopleId}
     * Returns people by Id
     *
     * @param peopleId UUID of people to get (required)
     * @return Successful request (status code 200)
     *         or Request not found (status code 404)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/people/{peopleId}",
        produces = { "application/json" }
    )
    ResponseEntity<Optional<People>> getPeopleById(
         @PathVariable("peopleId") UUID peopleId
    );

}
