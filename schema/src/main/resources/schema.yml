openapi: 3.0.0
info:
  version: 1.0.0
  title: People and Cars API
  description: This API allows registry cars to people
tags:
  - name: people
    description: People CRUD
  - name: car
    description: Car CRUD
  - name: registry
    description: registry cars vs people
paths:
  /people:
    get:
      tags:
        - people
      description: Returns all people from the system
      operationId: getAllPeople
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/People'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {"message": "Error 404 request not found"}
    post:
      tags:
        - people
      description: Add / Update people
      operationId: addUpdatePeople
      requestBody:
        description: Create/Update a People
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/People'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
        '405':
          description: Invalid input
  /people/{peopleId}:
    delete:
      tags:
        - people
      description: Delete people
      operationId: deletePeople
      parameters:
        - name: peopleId
          in: path
          description: UUID of people to delete
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
        '404':
          description:  {"message": "Not Found"}
    get:
      tags:
        - people
      description: Returns people by Id
      operationId: getPeopleById
      parameters:
        - name: peopleId
          in: path
          description: UUID of people to get
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/People'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {"message": "Not Found"}
  /people/{peopleId}/cars:
    get:
      tags:
        - people
      description: Get cars by  people
      operationId: getCarsByPeople
      parameters:
        - name: peopleId
          in: path
          description: UUID of people to get cars
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {"message": "Not Found"}
  /car:
    get:
      tags:
        - car
      description: Returns all cars from the system
      operationId: getAllCars
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {"message": "Error 404 request not found"}
    post:
      tags:
        - car
      description: Add / Update Car
      operationId: addUpdateCar
      requestBody:
        description: Create/Update a Car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '405':
          description: Invalid input
  /car/{carVin}:
    delete:
      tags:
        - car
      description: Delete car
      operationId: deleteCar
      parameters:
        - name: carVin
          in: path
          description: Vin of car to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: Not Found
    get:
      tags:
        - car
      description: Returns car by Vin
      operationId: getCarByVin
      parameters:
        - name: carVin
          in: path
          description: Vin of car to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Car'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {"message": "Not Found"}
  /car/{carVin}/people:
    get:
      tags:
        - car
      description: get people by car
      operationId: getPeopleByCar
      parameters:
        - name: carVin
          in: path
          description: Vin of car to get people
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/People'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                type: string
                example: {"message": "Not Found"}
  /registry:
    post:
      tags:
        - registry
      description: add registry car to people
      operationId: createRegistryCarPeople
      requestBody:
        description: Create registry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '405':
          description: Invalid input
components:
  schemas:
    People:
      type:
        object
      properties:
        id:
          type: string
          format: UUID
          example: 290286fe-e588-47c2-afbb-84204050b57f
        fisrtname:
          type: string
          example: Jhon
        lastname:
          type: string
          example: Hamel
        gender:
          type: string
          example: Male
        email:
          type: string
          example: jhonH@email.com
    Car:
      type:
        object
      properties:
        vin:
          type: string
          example: HJUI23431
        brand:
          type: string
          example: mercedes
        color:
          type: string
          example: black
        model:
          type: string
          example: suv
        year:
          type: integer
          format: int32
          example: 2022
    Registry:
      type:
        object
      properties:
        id:
          type: integer
          format: int64
          example: 976877
        People:
          $ref: '#/components/schemas/People'
        Car:
          $ref: '#/components/schemas/Car'

servers:
  - url: http://localhost:8080/api/